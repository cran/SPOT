# Experimental research in evolutionary computation
# author: thomas.bartz-beielstein@fh-koeln.de
# http://www.springer.com/3-540-32026-1
#
# Copyright (C) 2009 T. Bartz-Beielstein and C. Lasarczyk
# This program is free software;
# you can redistribute it and/or modify it under the terms of the 
# GNU General Public License as published by the Free Software Foundation; 
# either version 3 of the License,
# or (at your option) any later version.
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along
#  with this program; if not, see <http://www.gnu.org/licenses/>.
#
###########################################################
# SPOT configuration file
# Settings from this file overwrite default settings specified in 
# spotGetOptions.R
###########################################################
# Part I:  Algorithm dependent settings
# 
###########################################################
###########################################################

## to specify the additional R source file for the algorithm 
## two information my be given: the path to the R-file
## and the functionname. The R-file now
## 1) MUST be located in the directory given (alg.path) - default is srcPath
## 2) MUST have the same name as the function (PLUS the extension ".R")
## 3) MUST be given in alg.func
## Type: STRING:
## This R script will be sourced by source(paste(alg.path,alg.func,sep="/"))
alg.path="bin"

## Specify name of the algorithm to be tuned.
## Type: STRING
## The function identified by the string has exist in the R-workspace
alg.func = "spotAlgStartOnePlusOneEsJava"

## Column name containing results
alg.resultColumn = "Y"
## seed setting for to be used in the users algorithm
alg.seed = 1235

## Specify APD-File (Algorithm Problem Definition), 
## Default algorithm design and problem design related information is stored here.
## This configuration file is probably necessary for the user written algorithm. 
##  Type: STRING:
## The idea is, that some of the parameters that are specified in the .apd file 
## are the ones, that are to be tuned by SPOT, and therefore be written from SPOT in the
## .des file, the "dynamic" input for the algorithm (e.g., population size).
## The specification of which parameters are to be tuned must be
## provided by the .roi file. The default filenames for .apd, .roi, .bst, .des, .res  and .pdf 
## are generated generated by adding the extensions to the prefix of this .conf file.
## If there is any reason, the user may change the names to whatever he wants, but
## then he also must give the correct path to those files. (the path must be relative to this configuration file)
## The names of the variables are very generic too: <extension>FileName. See example with apd below 
#io.apdFileName = "onePlusOne0001.apd"


##########################################################
# SPOT Global parameter
###########################################################
spot.seed = 125
spot.fileMode=FALSE
###########################################################
# Part II: SPOT Steps related
##########################################################
# STEP auto
###########################################################
# Number of spot metamodels to be generated (used in spotStepAuto as main loop control variable)
auto.loop.steps = 50;

##########################################################
# STEP initial
###########################################################
# used by spotStepInitial to create an initial design
# expected a function name that also exists as R-filename
init.design.func = "spotCreateDesignLhd";
#optional: the path to that function, default will be the path given by the third parameter to spot() srcPath
#init.design.path <- NA
# Number of initial design points: 
# in case of <init.design.func="spotCreateDesignDoe"> the value must be smaller or equal to 2^<numberOfParametersInRoi> 
init.design.size = 10;
# Number of initial repeats:
init.design.repeats  = 2;


##########################################################
# STEP sequential
###########################################################
## spotStepSequential uses: 
## Function to merge data
#seq.merge.func <- function(expData){
#    mean(replicate(100,min(sample(expData,3,replace=TRUE))))
#  };
seq.merge.func <- mean;

# Max number of repeats for the same design points:
seq.design.maxRepeats = 5;
# design points evaluated by the predictor/surrogate-model (not the real algorithm)
seq.design.size = 250

#seq.predictionModel.path<-NA 
# seq.predictionModel.func = "spotPredictKrig";
# seq.predictionModel.func = "spotPredictDiceKriging"
# seq.predictionModel.func = "spotPredictMlegp"
# seq.predictionModel.func = "spotPredictLM"
# seq.predictionModel.func = "spotPredictTgp"
# seq.predictionModel.func = "spotPredictTree"
seq.predictionModel.func = "spotPredictRandomForest"
##########################################################
# Some IO-related parameters:
###########################################################
## select how much output during the spot-Run you'd like to see
## io.verbosity 0 means: be quit, 3 means: tell me everything
io.verbosity=3

# used in res and des files (roi)
io.columnSep = " ";

